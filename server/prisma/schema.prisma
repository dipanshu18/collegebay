generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  password       String
  college        String
  phoneNo        String
  image          String
  role           Role           @default(USER)
  posts          Post[]         @relation("seller")
  requests       Request[]
  upVotes        UpVote[]
  chats          Chat[]
  messages       Message[]
  notifications  Notification[] @relation("user-notifications")
  action         Notification[] @relation("which-user")
  purchasedItems Post[]         @relation("customer")
  feedbacks      Feedback[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Post {
  id           String       @id @default(uuid())
  title        String
  description  String
  price        String
  images       String[]
  category     PostCategory
  isAvailable  Boolean      @default(true)
  isApproved   Boolean      @default(false)
  adminMessage String?
  seller       User         @relation(fields: [sellerId], references: [id], name: "seller")
  sellerId     String
  soldTo       User?        @relation(fields: [soldToUserId], references: [id], name: "customer")
  soldToUserId String?
  feeback      Feedback?    @relation("postFeedback")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Feedback {
  id         String   @id @default(uuid())
  post       Post     @relation(fields: [postId], references: [id], name: "postFeedback")
  postId     String   @unique
  customer   User     @relation(fields: [customerId], references: [id])
  customerId String
  rating     Int
  text       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Request {
  id           String   @id @default(uuid())
  title        String
  description  String
  image        String
  upVotes      UpVote[]
  isApproved   Boolean  @default(false)
  adminMessage String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UpVote {
  id        String   @id @default(uuid())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requestId, userId])
}

model Chat {
  id           String    @id @default(uuid())
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String      @id @default(uuid())
  type      MessageType
  mediaUrl  String?
  text      String?
  chat      Chat        @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User        @relation(fields: [senderId], references: [id])
  senderId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Notification {
  id         String     @id @default(uuid())
  targetType TargetType
  target     User       @relation("user-notifications", fields: [targetId], references: [id])
  targetId   String
  action     User       @relation("which-user", fields: [actionId], references: [id])
  actionId   String
  message    String
  read       Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum PostCategory {
  NOTES
  BOOKS
  EQUIPMENT
  ELECTRONICS
  FURNITURE
}

enum MessageType {
  IMAGE
  VIDEO
  TEXT
}

enum TargetType {
  UPVOTE
  POST
  REQUEST
  ADMIN_APPROVE
  ADMIN_REJECT
}
